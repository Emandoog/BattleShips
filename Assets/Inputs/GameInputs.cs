//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Inputs/GameInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameInputs : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInputs"",
    ""maps"": [
        {
            ""name"": ""PlayerMap"",
            ""id"": ""fcdd5d51-e886-4a8b-9971-cc9371dcbb7d"",
            ""actions"": [
                {
                    ""name"": ""LeftClick"",
                    ""type"": ""Button"",
                    ""id"": ""a59cc92c-5e5b-4f1f-8b3c-3214064e4eb9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotateShip"",
                    ""type"": ""Button"",
                    ""id"": ""3e0a8ab4-7c05-4faa-aa9c-1e9e2ada9fad"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Confirm"",
                    ""type"": ""Button"",
                    ""id"": ""4c8879a8-aafd-4834-b927-463eb5963ef0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""GenerateEnemyShip"",
                    ""type"": ""Button"",
                    ""id"": ""d2dfef67-70e3-431a-bc64-08e53897e7e5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TogglePlayerShipVisibility"",
                    ""type"": ""Value"",
                    ""id"": ""4b8b0aa6-6d9f-4dbe-9abc-cd16698c289e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6a15fc00-5c35-4417-ac99-c139461fb29e"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""90309cb8-7c1c-48e7-acdf-415ccf457d97"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateShip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3fd620d6-d6ba-47f3-b1c6-91c4d3293b56"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Confirm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8cea7d9b-dab9-4556-8572-10574d83bb61"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GenerateEnemyShip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""07e430d8-26ef-466a-b7d5-e6490abfad76"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TogglePlayerShipVisibility"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerMap
        m_PlayerMap = asset.FindActionMap("PlayerMap", throwIfNotFound: true);
        m_PlayerMap_LeftClick = m_PlayerMap.FindAction("LeftClick", throwIfNotFound: true);
        m_PlayerMap_RotateShip = m_PlayerMap.FindAction("RotateShip", throwIfNotFound: true);
        m_PlayerMap_Confirm = m_PlayerMap.FindAction("Confirm", throwIfNotFound: true);
        m_PlayerMap_GenerateEnemyShip = m_PlayerMap.FindAction("GenerateEnemyShip", throwIfNotFound: true);
        m_PlayerMap_TogglePlayerShipVisibility = m_PlayerMap.FindAction("TogglePlayerShipVisibility", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerMap
    private readonly InputActionMap m_PlayerMap;
    private IPlayerMapActions m_PlayerMapActionsCallbackInterface;
    private readonly InputAction m_PlayerMap_LeftClick;
    private readonly InputAction m_PlayerMap_RotateShip;
    private readonly InputAction m_PlayerMap_Confirm;
    private readonly InputAction m_PlayerMap_GenerateEnemyShip;
    private readonly InputAction m_PlayerMap_TogglePlayerShipVisibility;
    public struct PlayerMapActions
    {
        private @GameInputs m_Wrapper;
        public PlayerMapActions(@GameInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftClick => m_Wrapper.m_PlayerMap_LeftClick;
        public InputAction @RotateShip => m_Wrapper.m_PlayerMap_RotateShip;
        public InputAction @Confirm => m_Wrapper.m_PlayerMap_Confirm;
        public InputAction @GenerateEnemyShip => m_Wrapper.m_PlayerMap_GenerateEnemyShip;
        public InputAction @TogglePlayerShipVisibility => m_Wrapper.m_PlayerMap_TogglePlayerShipVisibility;
        public InputActionMap Get() { return m_Wrapper.m_PlayerMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerMapActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerMapActions instance)
        {
            if (m_Wrapper.m_PlayerMapActionsCallbackInterface != null)
            {
                @LeftClick.started -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnLeftClick;
                @LeftClick.performed -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnLeftClick;
                @LeftClick.canceled -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnLeftClick;
                @RotateShip.started -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnRotateShip;
                @RotateShip.performed -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnRotateShip;
                @RotateShip.canceled -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnRotateShip;
                @Confirm.started -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnConfirm;
                @Confirm.performed -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnConfirm;
                @Confirm.canceled -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnConfirm;
                @GenerateEnemyShip.started -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnGenerateEnemyShip;
                @GenerateEnemyShip.performed -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnGenerateEnemyShip;
                @GenerateEnemyShip.canceled -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnGenerateEnemyShip;
                @TogglePlayerShipVisibility.started -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnTogglePlayerShipVisibility;
                @TogglePlayerShipVisibility.performed -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnTogglePlayerShipVisibility;
                @TogglePlayerShipVisibility.canceled -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnTogglePlayerShipVisibility;
            }
            m_Wrapper.m_PlayerMapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @LeftClick.started += instance.OnLeftClick;
                @LeftClick.performed += instance.OnLeftClick;
                @LeftClick.canceled += instance.OnLeftClick;
                @RotateShip.started += instance.OnRotateShip;
                @RotateShip.performed += instance.OnRotateShip;
                @RotateShip.canceled += instance.OnRotateShip;
                @Confirm.started += instance.OnConfirm;
                @Confirm.performed += instance.OnConfirm;
                @Confirm.canceled += instance.OnConfirm;
                @GenerateEnemyShip.started += instance.OnGenerateEnemyShip;
                @GenerateEnemyShip.performed += instance.OnGenerateEnemyShip;
                @GenerateEnemyShip.canceled += instance.OnGenerateEnemyShip;
                @TogglePlayerShipVisibility.started += instance.OnTogglePlayerShipVisibility;
                @TogglePlayerShipVisibility.performed += instance.OnTogglePlayerShipVisibility;
                @TogglePlayerShipVisibility.canceled += instance.OnTogglePlayerShipVisibility;
            }
        }
    }
    public PlayerMapActions @PlayerMap => new PlayerMapActions(this);
    public interface IPlayerMapActions
    {
        void OnLeftClick(InputAction.CallbackContext context);
        void OnRotateShip(InputAction.CallbackContext context);
        void OnConfirm(InputAction.CallbackContext context);
        void OnGenerateEnemyShip(InputAction.CallbackContext context);
        void OnTogglePlayerShipVisibility(InputAction.CallbackContext context);
    }
}
